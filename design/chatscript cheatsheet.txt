
match variables
u:  (I _$emotion him)Why do you _0 him?   
stores canonical form,
'_0 is authorial form - careful, that includes number, etc. this also works for patterns
                             'do matches do but not did - did matches only did even without apostrophe

persistant user variables

u: (my name is _~propername)Glad to meet you _0 ($username = _0)

$$foo   temp user variable (lasts to end of volley)

^keep()  do not disable this rule after it produces output

^repeat() even if using multiple rules, 

topic statementcan have keep and/or repeat. This is equivilent to putting keep and/or repeat in
every rule in the topic
topic: ~introductions keep repeat []
adding nostay: By default, if the bot gets a
response from a certain topics, it 'stays' in this topic and gives it priority over other topics.

%input  the id number (starting at 1) of the volley
%userfirstline the id number of the first volley of this conversation

# comments

source ignores line breaks


checking for a new conversation
================================

$pet = _0 $pethwhen = %input
# This means we could write script that can tell if this is a new conversation or not.

s: ($pet $petwhen<%userfirstline) I remember you have a $pet.

Set/concept membership
===========================
concept: ~table_pets (dog cat lion goat elephant)
t: ($pet?~table_pets) Do you ever feed your $pet table scraps during dinner?


general advice
=======================

The bot selects the first line that generates output, prints the output, and stops matching
(conclusion: order your patterns from the more specific to the more general)

a non-canonical form in a pattern, it will match only that exact form, even if we don't use
an apostrophe

In the normal course of events, what happens is this…

You are in a topic (however you got there).  You provide new input. The system will try to find a rejoinder for that input (and we assume there isnt one). So the system will try to find a responder within that topic (we assume there isnt one). So the system will try to use keywords of the input matched against keywords of OTHER topics to see if they might be useful. If it finds a match, it will test the responders of that topic. I presume you have NO topic which is prepared to respond to your input that the room is on fire (much less the exclamation about holy smokes).  So the system can randomly decide to quibble (if it can find a match).  If it rolls against that, or cant find a quibble. then it would next try to find a topic with keywords that match that it might gambit from. That probably fails because you still have no topic to cover fire. So ALL IT CAN DO is continue talking in the current topic until that topic is exhausted. What did you want it to do?  Randomly pick some other topic?

The key thing is topics have keywords that allow the system to look into them when trying to match input. Do you have any topic that might match your inputs?


things I don't understand
==========

^reuse(FOO)



useful idioms and demos
=======================



t: I'm saying [something random][some silly thing][things about flowers and bunnies]



# t: ^keep() [Hello] [Hi] [Hey], [talk] [speak] [say something] to me! I'm at the end of my topics!

# tis will respond with each variation once
u: (say it again) ^keep() something I repeat [a lot][a little].

# only the first one matched will fire, because the bot wont repeat without ^repeat()
u: (big ears) elephant

u: (trunk) elephant

topic: ~bot keep repeat [bot]

t: you entered bot topic

t: HI () [Hello] [Hi] [Hey], [talk] [speak] [say something] to me!
u: WHAT (what are you) I am a bot.
u: (tell me about yourself) ^reuse(WHAT) ^reuse(HI)

